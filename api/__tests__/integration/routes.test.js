const request = require('supertest');
const app = require('../../app');

const scan = {
   id: '1', // Unique generated by mongoDB
   status: 'Queued', // Queued, In Progress, Success, Failure  - TDD
   repositoryName: 'Repo-Name-Test',
   queuedAt: Date.now(),
   scanningAt: Date.now(),
   finishedAt: Date.now(),
   findings:
   [
       {
           id: '1',
           type: 'TYPE_2',
           ruleId: '2',
           location: {
               path: 'dss',
               positions: 'A',
               begin: 1,
               line: 2
           },
           metadata: {
               description: 'DSADa',
               severity: 'HIGH'
           }
       }
   ]
};

describe('POST to /scan', function () {

   it('should save a valid scan and return HTTP 201', async () => {   

      request(app)
         .post('/scans')
         .send(scan)
         .set('Accept', 'application/json')
         .expect('Content-Type', /json/)
         .expect(201)
         .then(response => {
            expect(response.body).toHaveProperty('createdId');
        });
   });

   it('should save a scan without findings', async () => {
         request(app)
            .post('/scans')
            .send(scan)
            .set('Accept', 'application/json')
            .expect('Content-Type', /json/)
            .expect(201)
            .then(response => {
               expect(response.body).toHaveProperty('createdId');
         });
   });

   it('should respond with status code 400 when an invalid status is sent', async (done) => {
      request(app)
         .post('/scans')
         .send(Object.assign({}, scan, { status: 'INVALID!!'}))
         .set('Accept', 'application/json')
         .expect('Content-Type', /json/)
         .expect(400)
         .end(function(err,res){
            if(err) throw(err);
            done();
         })
   });

   it('should respond with status code 400 when an invalid timestamp is sent', async (done) => {
      request(app)
         .post('/scans')
         .send(Object.assign({}, scan, { scanningAt: "Invalid timestamp" }))
         .set('Accept', 'application/json')
         .expect('Content-Type', /json/)
         .expect(400)
         .end(function(err,res){
            if(err) throw(err);
            done();
         })
   });


    it('should respond with status code 400 when an invalid finding record is sent', async () => {
      request(app)
         .post('/scans')
         .send(Object.assign({}, scan, { findings: [{id: 'Invalid Finding'}] }))
         .set('Accept', 'application/json')
         .expect('Content-Type', /json/)
         .expect(400)
         .end(function(err,res){
            if(err) throw(err);
            done();
         })
   });
});

describe('GET to /SCAN', function () {
   it('should return the scans list', async () => {
      request(app)
         .get('/scans')
         .set('Accept', 'application/json')
         .expect('Content-Type', /json/)
         .expect(200)
         .then(response => {
            expect(response.body).toBeTruthy();
         });
   });

   it('should fetch a scan findings', async () => {
      let savedScanId;
         request(app)
            .post('/scans')
            .send(scan)
            .set('Accept', 'application/json')
            .then(response => {
               savedScanId = response.body.createdId;
            });

         request(app)
            .get(`/scans/${savedScanId}/findings`)
            .set('Accept', 'application/json')
            .expect('Content-Type', /json/)
            .expect(200)
            .then(response => {
               expect(response.body).toBeTruthy();
               expect(response.body).toHaveProperty('findings')
            });
    });

    it('should respond with status code 404 if no scan finding is found', async () => {
         request(app)
            .get('/scans/1/findings')
            .set('Accept', 'application/json')
            .expect('Content-Type', /json/)
            .expect(400)
            .end(function(err,res){
               if(err) throw(err);
               done();
            })
    });
});